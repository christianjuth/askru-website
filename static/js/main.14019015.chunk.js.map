{"version":3,"sources":["redux/actions.js","redux/reducer.js","App.js","components/Navbar.js","pages/Home.js","serviceWorker.js","index.js"],"names":["SEARCH_SET","SEARCH_RESULTS","timeout","search","query","dispatch","type","payload","clearTimeout","setTimeout","a","global","axios","get","params","questions","data","reducer","state","action","searchResults","initialState","store","createStore","applyMiddleware","thunk","create","baseURL","App","className","useStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","padding","connect","props","classes","container","direction","justify","item","xs","md","disableGutters","variant","noWrap","placeholder","value","onChange","e","target","root","input","inputProps","map","r","component","gutterBottom","title","body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14019015.chunk.js","sourcesContent":["\nexport const SEARCH_SET = 'SEARCH_SET';\nexport const SEARCH_RESULTS = 'SEARCH_RESULTS';\n\n\nlet timeout = null;\nexport function search({ query }) {\n  return function(dispatch) {\n\n    dispatch({\n      type: SEARCH_SET,\n      payload: query\n    });\n\n    clearTimeout(timeout);\n    setTimeout(async () => {\n      let questions = await global.axios.get('/questions/search', {\n        params: {\n          query: query\n        }\n      });\n\n      dispatch({\n        type: SEARCH_RESULTS,\n        payload: questions.data.questions\n      });\n    }, 400);\n  };\n}\n","\nimport {\n  SEARCH_SET,\n  SEARCH_RESULTS\n} from './actions';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case SEARCH_SET:\n      return {\n        ...state,\n        search: action.payload\n      };\n    case SEARCH_RESULTS:\n      return {\n        ...state,\n        searchResults: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\nexport const initialState = {\n  search: '',\n  searchResults: []\n};\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer, { initialState } from './redux/reducer';\nimport { Provider } from 'react-redux';\n\nimport Navbar from './components/Navbar';\nimport HomeScreen from './pages/Home';\n\nconst store = createStore(reducer, initialState, applyMiddleware(thunk));\n\nglobal.axios = axios.create({\n  baseURL: 'https://api.askru.tech/api/'\n});\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Navbar/>\n        <HomeScreen/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport {fade, makeStyles} from '@material-ui/core/styles';\nimport { AppBar, Toolbar, Typography, InputBase, Grid } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { connect } from 'react-redux';\nimport { search } from '../redux/actions';\n\nconst useStyles = makeStyles(theme => ({\n  grow: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25)\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto'\n    }\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  inputRoot: {\n    color: 'inherit'\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7)\n  }\n}));\n\nfunction Navbar(props) {\n  const classes = useStyles();\n\n  function onSearch(e) {\n    props.dispatch(search({\n      query: e.target.value\n    }));\n  }\n\n  return (<div className={classes.grow}>\n    <AppBar position=\"fixed\">\n      <Grid container=\"container\" direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Grid item=\"item\" xs={12} md={8}>\n          <Toolbar disableGutters={true}>\n            <Typography variant=\"h6\" noWrap=\"noWrap\">\n              AskRU\n            </Typography>\n            <div className={classes.grow}/>\n            <div className={classes.search}>\n              <div className={classes.searchIcon}>\n                <SearchIcon/>\n              </div>\n              <InputBase\n                placeholder=\"Searchâ€¦\"\n                value={props.search}\n                onChange={onSearch}\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }} inputProps={{\n                  'aria-label' : 'search'\n                }}/>\n            </div>\n          </Toolbar>\n        </Grid>\n      </Grid>\n    </AppBar>\n  </div>);\n}\n\nconst mapStateToProps = state => {\n  return ({\n    search: state.search,\n  });\n};\n\n\nexport default connect(mapStateToProps)(Navbar);\n","import React, { Fragment } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport {Card, CardContent, Typography} from '@material-ui/core';\nimport { connect } from 'react-redux';\n\nfunction Home(props) {\n  return (<div>\n    <Grid container=\"container\" direction=\"row\" justify=\"center\" alignItems=\"center\">\n      <Grid item=\"item\" xs={12} md={8}>\n        {\n          props.searchResults.map((r) => {\n            return (\n              <Fragment>\n                <Card >\n                  <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\" gutterBottom=\"gutterBottom\">\n                      {r.title}\n                    </Typography>\n                    <Typography color=\"textSecondary\">\n                      {r.body}\n                    </Typography>\n                  </CardContent>\n                </Card>\n                <br/>\n              </Fragment>\n            );\n          })\n        }\n      </Grid>\n    </Grid>\n  </div>);\n}\n\nconst mapStateToProps = state => {\n  return ({\n    searchResults: state.searchResults,\n  });\n};\n\n\nexport default connect(mapStateToProps)(Home);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}